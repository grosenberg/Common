package net.certiv.common.util;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.attribute.BasicFileAttributes;
import java.nio.file.attribute.FileTime;
import java.text.SimpleDateFormat;
import java.time.Instant;
import java.util.Properties;
import java.util.jar.Attributes;
import java.util.jar.JarFile;
import java.util.jar.Manifest;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import net.certiv.common.log.Log;
import net.certiv.common.stores.Pair;

public class Version {

	/**
	 * Returns the package version as generated by Maven.
	 *
	 * <pre>
	 * <code>
	 * &lt;plugin&gt;
	 *   &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
	 *   &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;
	 *   &lt;version&gt;3.2.0&lt;/version&gt;
	 *   &lt;configuration&gt;
	 *     &lt;archive&gt;
	 *       &lt;manifest&gt;
	 *         &lt;addDefaultImplementationEntries&gt;true&lt;/addDefaultImplementationEntries&gt;
	 *         &lt;addDefaultSpecificationEntries&gt;true&lt;/addDefaultSpecificationEntries&gt;
	 *       &lt;/manifest&gt;
	 *     &lt;/archive&gt;
	 *   &lt;/configuration&gt;
	 * &lt;/plugin&gt;
	 * </code>
	 * </pre>
	 *
	 * @param cls any class within a jar prepared by Maven with version information
	 * @return the package version of the jar
	 */
	public static String pkgVersion(Class<?> cls) {
		String ver = cls.getPackage().getImplementationVersion();
		if (ver != null) return ver;
		return Strings.UNKNOWN;
	}

	/**
	 * Returns the value of the {@code version} key contained within a properties
	 * file of the given name located as a resource of the given class.
	 *
	 * @param cls class used to locate the properties file
	 * @param filename name of the properties file
	 * @return property value for the {@code version} key
	 */
	public static String propertiesVersion(Class<?> cls, String filename) {
		ClassLoader cl = cls.getClassLoader();
		try (InputStream in = cl.getResourceAsStream(filename)) {
			Properties prop = new Properties();
			prop.load(in);
			return (String) prop.get("version");

		} catch (IOException e) {
			Log.error(Version.class, "Failed reading version from '%s': %s", filename, e.getMessage());
			return Strings.UNKNOWN;
		}
	}

	private static final Pattern VERSION = Pattern.compile("<version>(.*?)</version>");

	/**
	 * Returns a {@code Pair} reporting the manifest "version" string and the last
	 * modified {@code Instant} of the manifest file.
	 * <p>
	 * If the reference class is not within a jar file, an attempt is made to read
	 * the "version" string from the {@code pom.xml} located in the Maven output
	 * directory root.
	 *
	 * @param cls a reference class file
	 * @return the verision info
	 */
	public static Pair<String, Instant> manifestVersion(Class<?> cls) {
		try {
			File file = new File(cls.getProtectionDomain().getCodeSource().getLocation().toURI());

			if (file.isFile()) {
				try (JarFile jar = new JarFile(file)) {
					Manifest manifest = jar.getManifest();
					Attributes attributes = manifest.getMainAttributes();
					String ver = attributes.getValue("Implementation-Version");
					return Pair.of(ver, lastModified(file));
				}

			} else if (file.isDirectory()) {
				Path dir = file.toPath();
				if (dir.endsWith("bin")) {
					dir = dir.getParent();
				} else if (dir.endsWith("target/classes")) {
					dir = dir.getParent().getParent();
				}
				File pom = dir.resolve("pom.xml").toFile();
				if (pom.isFile()) {
					String xml = FsUtil.readToString(pom);
					Matcher m = VERSION.matcher(xml);
					if (m.find()) {
						String ver = m.group(1);
						return Pair.of(ver, lastModified(pom));
					}
				}
			}

		} catch (Exception e) {
			Log.error(Version.class, "Failed reading manifest version: %s", e.getMessage());
		}
		return Pair.of(Strings.UNKNOWN, Instant.now());
	}

	public static Instant created(File file) throws IOException {
		BasicFileAttributes attr = Files.readAttributes(file.toPath(), BasicFileAttributes.class);
		return attr.creationTime().toInstant();
	}

	public static Instant lastModified(File file) throws IOException {
		BasicFileAttributes attr = Files.readAttributes(file.toPath(), BasicFileAttributes.class);
		return attr.lastModifiedTime().toInstant();
	}

	public static String creationDate(File file) {
		try {
			BasicFileAttributes attr = Files.readAttributes(file.toPath(), BasicFileAttributes.class);
			FileTime date = attr.creationTime();
			SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
			return df.format(date.toMillis());

		} catch (IOException e) {
			Log.error(Version.class, "Failed reading file creation date: %s", e.getMessage());
			return Strings.UNKNOWN;
		}
	}

	public static String modificationDate(File file) {
		try {
			BasicFileAttributes attr = Files.readAttributes(file.toPath(), BasicFileAttributes.class);
			FileTime date = attr.lastModifiedTime();
			SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
			return df.format(date.toMillis());

		} catch (IOException e) {
			Log.error(Version.class, "Failed reading file last modification date: %s", e.getMessage());
			return Strings.UNKNOWN;
		}
	}
}
